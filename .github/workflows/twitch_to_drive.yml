name: Twitch → Drive (no-cookies, OAuth)

on:
  workflow_dispatch: {}

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 720
    permissions:
      contents: write  # cần để commit linkdalay.csv

    env:
      QUALITY: best     # đổi thành "1080p" | "720p" nếu muốn ép độ phân giải

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install ffmpeg + yt-dlp
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          python3 -m pip install --upgrade pip
          pip install --upgrade yt-dlp

      - name: Pick next URL from link.csv (skip duplicates in linkdalay.csv)
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          touch link.csv
          touch linkdalay.csv

          NEXT_URL=""
          while IFS= read -r line || [ -n "${line-}" ]; do
            url="$(printf '%s' "$line" | tr -d '\r' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
            [ -z "$url" ] && continue        # bỏ dòng trống
            [[ "$url" =~ ^# ]] && continue   # bỏ comment
            if ! grep -Fqx -- "$url" linkdalay.csv; then
              NEXT_URL="$url"
              break
            fi
          done < link.csv

          if [ -z "$NEXT_URL" ]; then
            echo "Không còn link mới trong link.csv."
            echo "selected_url=" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Chọn link: $NEXT_URL"
          echo "selected_url=$NEXT_URL" >> $GITHUB_OUTPUT

      - name: Stop if no URL to process
        if: ${{ steps.pick.outputs.selected_url == '' }}
        run: echo "DONE"

      - name: Download from Twitch (yt-dlp → MP4)
        if: ${{ steps.pick.outputs.selected_url != '' }}
        env:
          URL: ${{ steps.pick.outputs.selected_url }}
          QUALITY: ${{ env.QUALITY }}
        run: |
          set -e
          mkdir -p out

          if [[ "$QUALITY" == "best" ]]; then
            FILTER='bestvideo*+bestaudio/best'
          else
            H="${QUALITY%p}"
            FILTER="bv*[height<=$H]+ba/b[height<=$H]/best"
          fi

          yt-dlp \
            -N 8 \
            --concurrent-fragments 16 \
            --fragment-retries 100 \
            --retry-sleep 2 \
            --no-part \
            --remux-video mp4 \
            -f "$FILTER" \
            -o "out/%(uploader)s_%(title).180B_%(id)s.%(ext)s" \
            "$URL"

      - name: List output files
        if: ${{ steps.pick.outputs.selected_url != '' }}
        run: ls -lah out || true

      - name: Install rclone (latest)
        if: ${{ steps.pick.outputs.selected_url != '' }}
        run: |
          set -e
          curl -fsSL https://rclone.org/install.sh | sudo bash
          rclone version

      - name: Configure rclone for Google Drive (OAuth token JSON)
        if: ${{ steps.pick.outputs.selected_url != '' }}
        env:
          GDRIVE_OAUTH_TOKEN_JSON: ${{ secrets.GDRIVE_OAUTH_TOKEN_JSON }}   # bắt buộc
          GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}                 # nên có
          TEAM_DRIVE_ID: ${{ secrets.TEAM_DRIVE_ID }}                       # optional (Shared Drive)
          GDRIVE_CLIENT_ID: ${{ secrets.GDRIVE_CLIENT_ID }}                 # optional
          GDRIVE_CLIENT_SECRET: ${{ secrets.GDRIVE_CLIENT_SECRET }}         # optional
        run: |
          set -e
          if [[ -z "$GDRIVE_OAUTH_TOKEN_JSON" ]]; then
            echo "ERROR: Thiếu secret GDRIVE_OAUTH_TOKEN_JSON" >&2
            exit 1
          fi

          TOKEN=$(printf "%s" "$GDRIVE_OAUTH_TOKEN_JSON" | tr -d '\n')

          {
            echo "[gdrive]"
            echo "type = drive"
            echo "scope = drive"
            if [[ -n "$GDRIVE_CLIENT_ID" && -n "$GDRIVE_CLIENT_SECRET" ]]; then
              echo "client_id = $GDRIVE_CLIENT_ID"
              echo "client_secret = $GDRIVE_CLIENT_SECRET"
            fi
            echo "token = $TOKEN"
            if [[ -n "$GDRIVE_FOLDER_ID" ]]; then
              echo "root_folder_id = ${GDRIVE_FOLDER_ID}"
            fi
            echo "pacer_min_sleep = 10ms"
            echo "pacer_burst = 200"
          } > rclone.conf

          if [[ -n "$TEAM_DRIVE_ID" ]]; then
            echo "team_drive = ${TEAM_DRIVE_ID}" >> rclone.conf
          fi

          chmod 600 rclone.conf

      - name: Upload to Google Drive (rclone copy)
        if: ${{ steps.pick.outputs.selected_url != '' }}
        env:
          RCLONE_CONFIG: ${{ github.workspace }}/rclone.conf
        run: |
          set -e
          rclone copy "out" "gdrive:" \
            --transfers 8 \
            --checkers 16 \
            --drive-chunk-size 64M \
            --ignore-existing \
            --stats 30s \
            --stats-file-name-length 0 \
            --retries 5 --low-level-retries 10

      - name: Append processed link to linkdalay.csv & push
        if: ${{ steps.pick.outputs.selected_url != '' }}
        env:
          URL: ${{ steps.pick.outputs.selected_url }}
        run: |
          set -e
          grep -Fqx -- "$URL" linkdalay.csv || echo "$URL" >> linkdalay.csv

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add linkdalay.csv
          git commit -m "append processed twitch link: $URL [skip ci]" || echo "No changes to commit."
          git push

      - name: Upload as GitHub Artifact (optional)
        if: ${{ steps.pick.outputs.selected_url != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: twitch-download
          path: out/*
          if-no-files-found: warn
