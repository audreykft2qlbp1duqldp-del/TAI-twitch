name: Twitch → Drive (STREAM, clip, dedup)

on:
  workflow_dispatch:
    inputs:
      quality:
        description: "Chọn độ phân giải"
        type: choice
        options: [best, 1080p, 720p, 480p, 360p]
        default: best
        required: true
      stream_to_drive:
        description: "Stream thẳng sang Drive (không lưu file trên runner)"
        type: boolean
        default: true
        required: true
      start_at:
        description: "Bắt đầu từ (HH:MM:SS). Mặc định 00:00:00"
        default: "00:00:00"
        required: false
      duration:
        description: 'Thời lượng (HH:MM:SS). Đặt "0" = toàn bộ'
        default: "0"
        required: false

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 720
    permissions:
      contents: write   # để commit/push linkdalay.csv

    env:
      QUALITY: ${{ inputs.quality }}
      START_AT: ${{ inputs.start_at }}
      DURATION: ${{ inputs.duration }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Install ffmpeg + yt-dlp + rclone
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          python3 -m pip install --upgrade pip
          pip install --upgrade yt-dlp
          curl -fsSL https://rclone.org/install.sh | sudo bash
          rclone version

      - name: Pick next URL from link.csv (skip duplicates in linkdalay.csv)
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          touch link.csv linkdalay.csv

          NEXT_URL=""
          while IFS= read -r line || [ -n "${line-}" ]; do
            url="$(printf '%s' "$line" | tr -d '\r' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
            [ -z "$url" ] && continue
            [[ "$url" =~ ^# ]] && continue
            if ! grep -Fqx -- "$url" linkdalay.csv; then
              NEXT_URL="$url"; break
            fi
          done < link.csv

          if [ -z "$NEXT_URL" ]; then
            echo "selected_url=" >> $GITHUB_OUTPUT
            echo "Không còn link mới."; exit 0
          fi

          echo "Chọn link: $NEXT_URL"
          echo "selected_url=$NEXT_URL" >> $GITHUB_OUTPUT

      - name: Stop if no URL
        if: ${{ steps.pick.outputs.selected_url == '' }}
        run: echo "DONE"

      - name: Configure rclone (Google Drive OAuth token)
        if: ${{ steps.pick.outputs.selected_url != '' }}
        env:
          GDRIVE_OAUTH_TOKEN_JSON: ${{ secrets.GDRIVE_OAUTH_TOKEN_JSON }}   # phải có refresh_token
          GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}                 # nên có
          TEAM_DRIVE_ID: ${{ secrets.TEAM_DRIVE_ID }}                       # optional (Shared Drive)
          GDRIVE_CLIENT_ID: ${{ secrets.GDRIVE_CLIENT_ID }}                 # optional
          GDRIVE_CLIENT_SECRET: ${{ secrets.GDRIVE_CLIENT_SECRET }}         # optional
        run: |
          set -e
          [ -n "$GDRIVE_OAUTH_TOKEN_JSON" ] || { echo "Thiếu GDRIVE_OAUTH_TOKEN_JSON"; exit 1; }
          TOKEN=$(printf "%s" "$GDRIVE_OAUTH_TOKEN_JSON" | tr -d '\n')

          {
            echo "[gdrive]"
            echo "type = drive"
            echo "scope = drive"
            [ -n "$GDRIVE_CLIENT_ID" ] && echo "client_id = $GDRIVE_CLIENT_ID"
            [ -n "$GDRIVE_CLIENT_SECRET" ] && echo "client_secret = $GDRIVE_CLIENT_SECRET"
            echo "token = $TOKEN"
            [ -n "$GDRIVE_FOLDER_ID" ] && echo "root_folder_id = ${GDRIVE_FOLDER_ID}"
            echo "pacer_min_sleep = 10ms"
            echo "pacer_burst = 200"
          } > rclone.conf

          [ -n "$TEAM_DRIVE_ID" ] && echo "team_drive = ${TEAM_DRIVE_ID}" >> rclone.conf
          chmod 600 rclone.conf

      - name: Preflight Google Drive token (must have refresh_token)
        if: ${{ steps.pick.outputs.selected_url != '' }}
        env:
          RCLONE_CONFIG: ${{ github.workspace }}/rclone.conf
        run: |
          set -e
          TMP="gdrive:__probe_$RANDOM"
          rclone mkdir "$TMP"
          rclone purge "$TMP" || true

      # =========================
      # A) STREAM trực tiếp → Drive (không dùng đĩa)
      # =========================
      - name: STREAM Twitch → ffmpeg → rclone rcat (no disk)
        if: ${{ steps.pick.outputs.selected_url != '' && inputs.stream_to_drive }}
        shell: bash
        env:
          URL: ${{ steps.pick.outputs.selected_url }}
          QUALITY: ${{ env.QUALITY }}
          START_AT: ${{ env.START_AT }}
          DURATION: ${{ env.DURATION }}
          RCLONE_CONFIG: ${{ github.workspace }}/rclone.conf
        run: |
          set -euo pipefail

          # Chọn filter theo chất lượng
          if [[ "$QUALITY" == "best" ]]; then
            FILTER='bestvideo*+bestaudio/best'
          else
            H="${QUALITY%p}"
            FILTER="bv*[height<=$H]+ba/b[height<=$H]/best"
          fi

          # Lấy tên file (không tải)
          NAME="$(yt-dlp --print "%(uploader)s_%(title).180B_%(id)s" "$URL" | head -n1)"
          SAFE="$(printf '%s' "$NAME" | tr -d '\n' | sed 's#[/<>:"\\|?*]#_#g')"
          REMOTE="gdrive:${SAFE}.mp4"
          echo "[INFO] Upload target: $REMOTE"

          # Lấy URL stream (1 hoặc 2 dòng: video, audio)
          mapfile -t URLS < <(yt-dlp -g -f "$FILTER" "$URL")

          # Tham số cắt
          IN_SS=""
          OUT_T=()
          if [[ -n "$START_AT" && "$START_AT" != "0" && "$START_AT" != "00:00:00" ]]; then
            IN_SS="-ss $START_AT"
          fi
          if [[ -n "$DURATION" && "$DURATION" != "0" ]]; then
            OUT_T=(-t "$DURATION")
          fi

          if [ "${#URLS[@]}" -ge 2 ]; then
            VURL="${URLS[0]}"; AURL="${URLS[1]}"
            echo "[INFO] Using separate V/A URLs"
            ffmpeg -hide_banner -loglevel error \
              $IN_SS -i "$VURL" $IN_SS -i "$AURL" \
              -map 0:v:0 -map 1:a:0 \
              -c copy -bsf:a aac_adtstoasc \
              -movflags +frag_keyframe+empty_moov \
              "${OUT_T[@]}" \
              -f mp4 - \
            | rclone rcat "$REMOTE" \
                --drive-chunk-size 64M --transfers 1 --checkers 4 --progress
          else
            ONE="${URLS[0]}"
            echo "[INFO] Using single URL"
            ffmpeg -hide_banner -loglevel error \
              $IN_SS -i "$ONE" \
              -c copy -bsf:a aac_adtstoasc \
              -movflags +frag_keyframe+empty_moov \
              "${OUT_T[@]}" \
              -f mp4 - \
            | rclone rcat "$REMOTE" \
                --drive-chunk-size 64M --transfers 1 --checkers 4 --progress
          fi

      # =========================
      # B) (tắt STREAM) TẢI VỀ rồi COPY
      # =========================
      - name: Download to disk (yt-dlp → MP4)
        if: ${{ steps.pick.outputs.selected_url != '' && !inputs.stream_to_drive }}
        env:
          URL: ${{ steps.pick.outputs.selected_url }}
          QUALITY: ${{ env.QUALITY }}
          START_AT: ${{ env.START_AT }}
          DURATION: ${{ env.DURATION }}
        run: |
          set -e
          mkdir -p out
          if [[ "$QUALITY" == "best" ]]; then
            FILTER='bestvideo*+bestaudio/best'
          else
            H="${QUALITY%p}"
            FILTER="bv*[height<=$H]+ba/b[height<=$H]/best"
          fi

          # Cắt khi tải về bằng --download-sections (ổn định cho HLS)
          DL_ARGS=()
          if [[ -n "$DURATION" && "$DURATION" != "0" && "$START_AT" != "0" && "$START_AT" != "00:00:00" ]]; then
            DL_ARGS+=(--download-sections "*${START_AT}-${DURATION}")
          elif [[ -n "$DURATION" && "$DURATION" != "0" ]]; then
            DL_ARGS+=(--download-sections "*0:00:00-${DURATION}")
          fi

          yt-dlp -N 8 --concurrent-fragments 16 --fragment-retries 100 --retry-sleep 2 \
            --no-part --remux-video mp4 \
            -f "$FILTER" "${DL_ARGS[@]}" \
            -o "out/%(uploader)s_%(title).180B_%(id)s.%(ext)s" \
            "$URL"

      - name: Upload folder out/ → Drive (copy then cleanup)
        if: ${{ steps.pick.outputs.selected_url != '' && !inputs.stream_to_drive }}
        env:
          RCLONE_CONFIG: ${{ github.workspace }}/rclone.conf
        run: |
          set -e
          rclone copy "out" "gdrive:" \
            --transfers 8 --checkers 16 --drive-chunk-size 64M \
            --ignore-existing --stats 30s --stats-file-name-length 0 \
            --retries 5 --low-level-retries 10
          rm -rf out

      - name: Append processed link to linkdalay.csv & push
        if: ${{ steps.pick.outputs.selected_url != '' }}
        env:
          URL: ${{ steps.pick.outputs.selected_url }}
        run: |
          set -e
          grep -Fqx -- "$URL" linkdalay.csv || echo "$URL" >> linkdalay.csv
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add linkdalay.csv
          git commit -m "append processed twitch link: $URL [skip ci]" || echo "No changes."
          git push
