name: Twitch → Drive (MP4 sạch tuyệt đối, re-encode)

on:
  workflow_dispatch:
    inputs:
      quality:
        description: "Chọn độ phân giải đích"
        type: choice
        options: [best, 1080p, 720p, 480p, 360p]
        default: best
        required: true
      start_at:
        description: "Bắt đầu từ (HH:MM:SS). Mặc định 00:00:00"
        default: "00:00:00"
        required: false
      duration:
        description: 'Thời lượng (HH:MM:SS). Đặt "0" = toàn bộ'
        default: "0"
        required: false

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 720
    permissions:
      contents: write

    env:
      QUALITY: ${{ inputs.quality }}
      START_AT: ${{ inputs.start_at }}
      DURATION: ${{ inputs.duration }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Install ffmpeg + yt-dlp + rclone
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          python3 -m pip install --upgrade pip
          pip install --upgrade yt-dlp
          curl -fsSL https://rclone.org/install.sh | sudo bash
          rclone version

      - name: Pick next URL from link.csv (skip duplicates in linkdalay.csv)
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          touch link.csv linkdalay.csv
          NEXT_URL=""
          while IFS= read -r line || [ -n "${line-}" ]; do
            url="$(printf '%s' "$line" | tr -d '\r' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
            [ -z "$url" ] && continue
            [[ "$url" =~ ^# ]] && continue
            if ! grep -Fqx -- "$url" linkdalay.csv; then NEXT_URL="$url"; break; fi
          done < link.csv

          if [ -z "$NEXT_URL" ]; then
            echo "selected_url=" >> $GITHUB_OUTPUT
            echo "Không còn link mới."; exit 0
          fi
          echo "Chọn link: $NEXT_URL"
          echo "selected_url=$NEXT_URL" >> $GITHUB_OUTPUT

      - name: Stop if no URL
        if: ${{ steps.pick.outputs.selected_url == '' }}
        run: echo "DONE"

      - name: Configure rclone (Google Drive OAuth token)
        if: ${{ steps.pick.outputs.selected_url != '' }}
        env:
          GDRIVE_OAUTH_TOKEN_JSON: ${{ secrets.GDRIVE_OAUTH_TOKEN_JSON }}   # phải có refresh_token
          GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}                 # nên có
          TEAM_DRIVE_ID: ${{ secrets.TEAM_DRIVE_ID }}                       # optional
          GDRIVE_CLIENT_ID: ${{ secrets.GDRIVE_CLIENT_ID }}                 # optional
          GDRIVE_CLIENT_SECRET: ${{ secrets.GDRIVE_CLIENT_SECRET }}         # optional
        run: |
          set -e
          [ -n "$GDRIVE_OAUTH_TOKEN_JSON" ] || { echo "Thiếu GDRIVE_OAUTH_TOKEN_JSON"; exit 1; }
          TOKEN=$(printf "%s" "$GDRIVE_OAUTH_TOKEN_JSON" | tr -d '\n')
          {
            echo "[gdrive]"
            echo "type = drive"
            echo "scope = drive"
            [ -n "$GDRIVE_CLIENT_ID" ] && echo "client_id = $GDRIVE_CLIENT_ID"
            [ -n "$GDRIVE_CLIENT_SECRET" ] && echo "client_secret = $GDRIVE_CLIENT_SECRET"
            echo "token = $TOKEN"
            [ -n "$GDRIVE_FOLDER_ID" ] && echo "root_folder_id = ${GDRIVE_FOLDER_ID}"
            echo "pacer_min_sleep = 10ms"
            echo "pacer_burst = 200"
          } > rclone.conf
          [ -n "$TEAM_DRIVE_ID" ] && echo "team_drive = ${TEAM_DRIVE_ID}" >> rclone.conf
          chmod 600 rclone.conf

      - name: Preflight Google Drive token
        if: ${{ steps.pick.outputs.selected_url != '' }}
        env:
          RCLONE_CONFIG: ${{ github.workspace }}/rclone.conf
        run: |
          set -e
          TMP="gdrive:__probe_$RANDOM"
          rclone mkdir "$TMP"
          rclone purge "$TMP" || true

      - name: Re-encode to CLEAN MP4 on disk (ffmpeg H.264 + AAC + faststart)
        if: ${{ steps.pick.outputs.selected_url != '' }}
        shell: bash
        env:
          URL: ${{ steps.pick.outputs.selected_url }}
          QUALITY: ${{ env.QUALITY }}
          START_AT: ${{ env.START_AT }}
          DURATION: ${{ env.DURATION }}
        run: |
          set -euo pipefail
          mkdir -p out_final

          # Lọc theo độ phân giải đầu vào (để lấy stream phù hợp)
          if [[ "$QUALITY" == "best" ]]; then
            FILTER='bestvideo*+bestaudio/best'
            SCALE_FILTER=""   # không ép scale nếu chọn best
          else
            H="${QUALITY%p}"
            FILTER="bv*[height<=$H]+ba/b[height<=$H]/best"
            SCALE_FILTER="scale=-2:${H}"
          fi

          # Lấy tên file sạch
          NAME="$(yt-dlp --print "%(uploader)s_%(title).180B_%(id)s" "$URL" | head -n1)"
          SAFE="$(printf '%s' "$NAME" | tr -d '\n' | sed 's#[/<>:"\\|?*]#_#g')"
          OUT="out_final/${SAFE}.mp4"
          echo "[INFO] Output file: $OUT"

          # Lấy URL stream (1 hoặc 2 dòng: video, audio)
          mapfile -t URLS < <(yt-dlp -g -f "$FILTER" "$URL")

          # Thời gian cắt
          IN_SS_ARGS=()
          OUT_T_ARGS=()
          if [[ -n "$START_AT" && "$START_AT" != "0" && "$START_AT" != "00:00:00" ]]; then
            IN_SS_ARGS=(-ss "$START_AT")
          fi
          if [[ -n "$DURATION" && "$DURATION" != "0" ]]; then
            OUT_T_ARGS=(-t "$DURATION")
          fi

          # Cài đặt encode "sạch tuyệt đối"
          # - CFR 30fps, H.264 High@4.1, yuv420p
          # - AAC-LC 160k, 48kHz, stereo
          # - +faststart (moov ở đầu)
          # - Nếu chọn chất lượng cố định (khác 'best') và cần scale thì thêm filter
          VF_ARGS=()
          if [[ -n "$SCALE_FILTER" ]]; then
            VF_ARGS=(-vf "${SCALE_FILTER},fps=30")
          else
            VF_ARGS=(-vf "fps=30")
          fi

          COMMON_ENC=(-c:v libx264 -preset veryfast -profile:v high -level 4.1 -pix_fmt yuv420p -crf 20 \
                      -c:a aac -b:a 160k -ac 2 -ar 48000 \
                      -movflags +faststart \
                      -max_muxing_queue_size 1024)

          if [ "${#URLS[@]}" -ge 2 ]; then
            VURL="${URLS[0]}"; AURL="${URLS[1]}"
            echo "[INFO] Re-encode from separate V/A URLs"
            ffmpeg -hide_banner -loglevel error \
              "${IN_SS_ARGS[@]}" -i "$VURL" "${IN_SS_ARGS[@]}" -i "$AURL" \
              -map 0:v:0 -map 1:a:0 \
              "${VF_ARGS[@]}" \
              "${OUT_T_ARGS[@]}" \
              "${COMMON_ENC[@]}" \
              "$OUT"
          else
            ONE="${URLS[0]}"
            echo "[INFO] Re-encode from single URL"
            ffmpeg -hide_banner -loglevel error \
              "${IN_SS_ARGS[@]}" -i "$ONE" \
              -map 0:v:0 -map 0:a:0? \
              "${VF_ARGS[@]}" \
              "${OUT_T_ARGS[@]}" \
              "${COMMON_ENC[@]}" \
              "$OUT"
          fi

          # In dung lượng để ước lượng còn trống
          ls -lh "$OUT"

      - name: Upload MP4 to Google Drive (copy then cleanup)
        if: ${{ steps.pick.outputs.selected_url != '' }}
        env:
          RCLONE_CONFIG: ${{ github.workspace }}/rclone.conf
        run: |
          set -e
          rclone copy "out_final" "gdrive:" \
            --transfers 2 --checkers 8 --drive-chunk-size 64M \
            --stats 30s --stats-file-name-length 0 \
            --retries 5 --low-level-retries 10
          rm -rf out_final

      - name: Append processed link to linkdalay.csv & push
        if: ${{ steps.pick.outputs.selected_url != '' }}
        env:
          URL: ${{ steps.pick.outputs.selected_url }}
        run: |
          set -e
          grep -Fqx -- "$URL" linkdalay.csv || echo "$URL" >> linkdalay.csv
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add linkdalay.csv
          git commit -m "append processed twitch link: $URL [skip ci]" || echo "No changes."
          git push
